## careful YAML is being used here
# - is shorthand for array notation

input: 
    cb_server_name: cbresponseserver
    cb_server_url: https://cbresponseserver
    #optional rabbit mq options - if none are specified, /etc/cb//cb.conf
    #will be used
    #rabbit_mq_username: cb
    #rabbit_mq_hostname: localhost
    #rabbit_mq_password:
    #bind_raw_exchange: true ( defaults to false )
    # optional tls for MQ
    # if ommited no tls will be used
    #tls stanza defines optional tls parameters for ampqs
    #tls:
    #    client_key: client.key
    #    client_cert: client.crt
    #    ca_cert: ca.crt
    #    verify: false
    # optional explicit event map - by default the
    # forwarder will attempt to consume all* events
    # event_map: defines the messages to consume
    #event_map:
    #   event_category: 
    #         - specific_routing_keys
    #ex)  
    #...
    #event_map:
    #    events_watchlist:
    #        - watchlist.storage.hit.process
    #        - watchlist.storage.hit.binary
    #        - watchlist.hit.binary
    #        - watchlist.hit.binary
    # optional post processing for feedhits
    # has its own TLS section as above
    #post_processing:
    #    tls:
    #        tls_verify: false
    #    api_token: <CBRTOKEN>
    #    proxy_url: <proxyurl>

#output stanza defines output types 
# and providing an output destination, and format-type
# the old output_types:
# file,http,socket,splunk,http,syslog etc are still available and
# function very similarly to in 3.X and earlier

output:
    file:
        path: "output-json.txt"
        format:
            type: json 

# these options are retained from prior versions
# they are applied to ALL in-flight messages
# if the key exists , it will be removed
# conversly the k-vs will be added to add messages
# users should use the template output options for more sophisticated
# levels of output control than allowed by these more granular settings

# optional: removeFromOutput - a list of keys to remove from the output
#removeFromOutput:
#    - key

#optional: addToOutput - a list of k-vs (a ditionary) to add to each element
#addToOutput:
#    key : value
#    key2 : value2

#

#the filter section is optional
#filter:
#    template: >-
#                {{if (eq .type "alert.watchlist.hit.query.binary") -}}
#                      KEEP
#                {{- else -}}
#                      DROP
#                {{- end}}
#
#
# The filter will be evaluated for each message and will KEEP or DROP (DEFAUlT)
# messages based on the evaluated string of the filter-template
# the templates are specified in golang's templating language
# the filters have optional plugins that can be used by advanced users to
# write a 'functionmap' from go/text/template that will be available
# the filter at runtime allowing customization

# The output stanza defines a output - key'd from a type of output
# and providing an output destination, and format-type
# the old output_types:
# file,http,socket,splunk,http,syslog etc are still available and
# function very similarly to in 3.0
# merely being configured in YAML
# multiple outputs is a new feature, be gentle
# new templates for output formating
# you can specify a golang text/template to format the outgoing
# Carbon Black response message before it is processed by the output handler
# the 'template:' key provdes a go text-template that
# receives the CbR message as a map, with string keys and values
# corresponding to the cbr message like map[string] interface{}
# which can be manipulated fairly easily in the templating language provided by go
# use .Key to acces the value of Key
# file:
#    path: "output-template.txt"
#    format:
#       type: template
#        template: {{YamlFormat .}}
